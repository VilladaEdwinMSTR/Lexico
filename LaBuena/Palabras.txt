%= toUpperCase Math.log toLowerCase ] a1 for nextBoolean var <<= * proc ) >>= switch File.exist? do |= + { nextLong < = isSafeInteger toUpperCase a11 SecureRandom if *= nextBigInteger nextByte Math.exp Math.min == != private srand ^= nextShort || nextFloat Math.tan } x1 ZeroDivisionError  % nextBigDecimal &= while [ >= - short Math.hypot > ( isFinite TypeError /= += isInteger Math.round b2 -=  time.sec /  Math.pow Math.cosh Math.copySign file.pos random Math.cos time.min NotImplementedError IndexError KeyError  file.seek  let file.flush Time.local time.usec MemoryError Math.sin Math.ceil file.eof? File.writable? SyntaxError  Math.toDegrees file.close args Time.new File.write ModuleNotFoundError  time.getutc File.delete NameError Math.scalb Time.at Math.max Math.log1p protected File.readlines procedure Math.floor File.open File.rename time.hour public Time.utc startsWith nextDouble time.day File.binwrite long File.executable? && Math.atan Math.atan2 File.foreach time.zone Math.getExponent AttributeError IOError RecursionError AssertionError nextLine FileNotFoundError    File.readable? endsWith Math.abs Math.acos Math.rint Time.gm Math.nextUp RuntimeError OverflowError  File.join ValueError >>>= toCapitalize Math.asin file.rewind Math.scalb Math.cbrt   File.size Math.IEEEremainder Math.log10 <= Time.now Math.expm1 new  File.expand_path File.zero? ImportError  File.file? time.month lastIndexOf Math.sqrt Math.tanh Math.toRadians ! Math.nextAfter  Math.sinh File.directory? default Math.sinh Math.signum case File.realpath Math.ulp indexOf contains Math.random File.stat random File.new time.year next nextInt
if ( a == b )
{
x = y + c
while ( y != a )
}